# coding=utf-8
#
# @lc app=leetcode id=402 lang=python
#
# [402] Remove K Digits
#
# https://leetcode.com/problems/remove-k-digits/description/
#
# algorithms
# Medium (26.97%)
# Likes:    1059
# Dislikes: 66
# Total Accepted:    69.4K
# Total Submissions: 257.5K
# Testcase Example:  '"1432219"\n3'
#
# Given a non-negative integer num represented as a string, remove k digits
# from the number so that the new number is the smallest possible.
# 
# 
# Note:
# 
# The length of num is less than 10002 and will be ≥ k.
# The given num does not contain any leading zero.
# 
# 
# 
# 
# Example 1:
# 
# Input: num = "1432219", k = 3
# Output: "1219"
# Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219
# which is the smallest.
# 
# 
# 
# Example 2:
# 
# Input: num = "10200", k = 1
# Output: "200"
# Explanation: Remove the leading 1 and the number is 200. Note that the output
# must not contain leading zeroes.
# 
# 
# 
# Example 3:
# 
# Input: num = "10", k = 2
# Output: "0"
# Explanation: Remove all the digits from the number and it is left with
# nothing which is 0.
# 
# 
#


class Solution(object):
    def _removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        # O(3n)
        if len(num) <= k:
            return '0'
        elif k <= 0:
            return num
        count = 0
        index = 0
        new_num = ''
        # 第一轮，从前往后，删掉前面的较大值
        while index < len(num):
            if index + 1 < len(num) and int(num[index]) > int(num[index+1]):
                index += 1
                count += 1
                while new_num and count < k and num[index] == '0':
                    new_num = new_num[:-1]
                    count += 1
                while not new_num and index < len(num) and num[index] == '0':
                    index += 1
                if not new_num and index == len(num):
                    return '0'
                if count == k:
                    new_num += num[index:]
                    return new_num if new_num else '0'
            else:
                new_num += num[index]
                index += 1
        return new_num[:count-k]
        # 其实后面的两个，就直接截断就好了

        # 第二轮，从后往前，删掉后面的较大值

        # 第三轮，从后往前，删掉后面的值

    def __removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        # 思路是这么个思路
        # 从前往后
        # 删掉小的
        # 然后保留
        # 使用栈保留剩余的数字
        stack = []
        count = 0
        i = 0
        while i < len(num):
            if i+1 < len(num) and num[i] > num[i+1]:
                count += 1
                if count == k:
                    stack.extend(list(num[i+1:]))
                    break
                i += 1
                while stack and stack[-1] > num[i]:
                    stack.pop()
                    count += 1
                    if count == k:
                        stack.extend(list(num[i:]))
                        i = len(num)
                        break
            else:
                stack.append(num[i])
                i += 1
        while stack and stack[0] == '0':
            stack.pop(0)
        if not stack:
            return '0'

        return ''.join(stack[:count-k]) or '0' if count < k else ''.join(stack)

    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        # 单调栈不应该如此丑陋
        stack = []
        for n in num:
            while stack and stack[-1] > n and k:
                k -= 1
                stack.pop()
                continue
            else:
                stack.append(n)
        if not stack:
            return '0'
        while stack and stack[0] == '0':
            stack.pop(0)
        if not stack:
            return '0'
        while stack and k:
            k -= 1
            stack.pop()
        if not stack:
            return '0'
        return ''.join(stack)


# if __name__ == '__main__':
#     s = Solution()
#     print s.removeKdigits('112', 1)
#     print s.removeKdigits
#     print s.removeKdigits('9', 1)
#     print s.removeKdigits("1234567890", 9)
#     print s.removeKdigits('10', 1)
#     print s.removeKdigits("13431342", 3)
#     print s.removeKdigits("13431342", 5)
#     print s.removeKdigits("13431342", 1)
#     print s.removeKdigits("12345", 2)
#     print s.removeKdigits("12345", 3)
#     print s.removeKdigits("1432219", 3)
#     print s.removeKdigits("10200", 1)
#     print s.removeKdigits("10", 2)
